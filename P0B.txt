/////////////////////////////////////////////////////
//
// Name: Project 0 Bravo
// Author: Caleb Flick (calebflick@gmail.com)
// Date: 3/2/2020
// Description: Series of apex methods to demonstrate
// 		basic understanding of coding concepts.
// 
/////////////////////////////////////////////////////

public class P0B
{
    public static Integer nFibonacci(Integer n)
    {
        Integer firstNumber = 1;
        Integer secondNumber = 1;
        Integer sum = 0;	//sum is 0 for 0
        
        for (Integer i = 1; i <= n; i++)
        {
            if (i == 1 || i == 2)
            {
                /* Sum is 1 for 1 and 2 */
                sum = 1;
            }
            else
            {
                /* Sum is previous two numbers */
                sum = firstNumber + secondNumber;
                
                /* Replace saved numbers */
                secondNumber = firstNumber;
                firstNumber = sum;
            }
        }
        
        return sum;
    }
    
    public static Integer[] sortArray(Integer[] intList)
    {
        /* Using Selection Sort */
        
        Integer n = intList.size();
        
        /* Move Through Unsorted Array */
        for (Integer i = 0; i < n - 1; i++)
        {
            Integer minIndex = i;
            
            /* Find Index of Min Element */
            for (Integer j = i + 1; j < n; j++)
            {
                if (intList[j] < intList[minIndex])
                {
                    minIndex = j;
                }
            }
            
            /* Swap Min Element and First Unsorted Element */
            Integer temp = intList[minIndex];
            intList[minIndex] = intList[i];
            intList[i] = temp;
        }
        
        return intList;
    }
    
    public static Integer nFactorial(Integer n)
    {
        Integer sum = 1;
        
        if (n <= 0)
        {
            return 1;	//0! = 1
        }
        else
        {
            /* Multiply n by Every Integer Below It */
            for (Integer i = n; i > 0; i--)
        	{
            	sum *= i;
        	}
        }
        
        return sum;
    }
    
    public static Integer[] rotateLeftNTimes(Integer[] intArray, Integer n)
    {
        /* Find Modulus of n / Array Size */
        n = Math.mod(n, intArray.size());	//requires fewer loops in for loop
        
        /* Repeat n Times */
        for (Integer i = 0; i < n; i++)
        {
        	Integer firstElement = intArray[0];
        	
            /* Rotate Left by One */
        	for (Integer j = 0; j < intArray.size() - 1; j++)
        	{
            	intArray[j] = intArray[j + 1];
        	}
        	
        	intArray[intArray.size() - 1] = firstElement;
        }
        
        return intArray;
    }
    
    public static Boolean bracketsAreBalanced(String s)
    {
        /* Remove Spaces from String */
        s = s.deleteWhitespace();
        
        /* Check If String Is An Even Number */
        if (Math.mod(s.length(), 2) != 0)
        {
            //System.debug(s);
            //System.debug('String has an uneven number of characters.');
            
            return false;	//return false if the string length isn't an even number
        }
        else
        {
            List<String> stack = new List<String>();
            
            /* Move Through String */
            for (Integer i = 0; i < s.length(); i++)
            {
                String currentChar = s.substring(i, i + 1);
                
                /* Find Opening Brackets */
                if (currentChar == '(' || currentChar == '{' || currentChar == '[')
                {
                    stack.add(currentChar);
                }
                /* Find Closing Brackets */
                else if (currentChar == ')' || currentChar == '}' || currentChar == ']')
                {
                    /* Check if Closing Bracket Has a Matching Opening Bracket */
                    switch on currentChar
                    {
                        when ')'
                        {
                            if (stack.get(stack.size() - 1) != '(')
                            {
                                //System.debug(s);
            					//System.debug(stack.get(stack.size() - 1) + ' doesn\'t mirror ' + currentChar);
                                
                                return false;	//return false if the first closing bracket doesn't match the last opening bracket
                            }
                            else
                            {
                                stack.remove(stack.size() - 1);	//remove the matching opening bracket
                            }
                        }
                        when '}'
                        {
                            if (stack.get(stack.size() - 1) != '{')
                            {
                                //System.debug(s);
            					//System.debug(stack.get(stack.size() - 1) + ' doesn\'t mirror ' + currentChar);
                                
                                return false;	//return false if the first closing bracket doesn't match the last opening bracket
                            }
                            else
                            {
                                stack.remove(stack.size() - 1);	//remove the matching opening bracket
                            }
                        }
                        when ']'
                        {
                            if (stack.get(stack.size() - 1) != '[')
                            {
                                //System.debug(s);
            					//System.debug(stack.get(stack.size() - 1) + ' doesn\'t mirror ' + currentChar);
                                
                                return false;	//return false if the first closing bracket doesn't match the last opening bracket
                            }
                            else
                            {
                                stack.remove(stack.size() - 1);	//remove the matching opening bracket
                            }
                        }
                    }
                }
            }
            
            return true;
        }
    }
    
    private Boolean OldBracket(String s)	//previous method using reversed string
    {
        /* Remove Spaces from String */
        s = s.deleteWhitespace();
        
        /* Check If String Is An Even Number */
        if (Math.mod(s.length(), 2) != 0)
        {
            //System.debug(s);
            //System.debug('String hass an uneven number of characters.');
            
            return false;	//return false if the string length isn't an even number
        }
        else
        {
            String reversedString = s.reverse();
        	
            /* Move Through String */
        	for (Integer i = 0; i < s.length(); i++)
        	{
            	String char1 = s.substring(i, i + 1);
            	String char2 = reversedString.substring(i, i + 1);
            	
                /* Check If Bracket Matches Reversed Bracket */
            	if (char1 == '(' && char2 != ')' || char1 == '{' && char2 != '}' || char1 == '[' && char2 != ']')
            	{
                    //System.debug(s);
                    //System.debug(char1 + ' doesn\'t mirror ' + char2);
                    
                	return false;	//return false if the first bracket doesn't mirror the last bracket
            	}
        	}
            
            return true;
        }
    }

    public static void updateAccountSize()
    {
        /* Retrieve All Accounts */
        List<Account> accountsList = [SELECT NumberOfEmployees, Size__c FROM Account ORDER BY NumberOfEmployees DESC];
        
        
        /* Update Account Size */
        for (Account acc : accountsList)
        {
            if (acc.NumberOfEmployees <= 1000)
            {
                acc.Size__c = 'Small';
                update acc;
            }
            else if (acc.NumberOfEmployees <= 10000)
            {
                acc.Size__c = 'Medium';
                update acc;
            }
            else
            {
                acc.Size__c = 'Large';
                update acc;
            }
        }
    }
    
    public static void updateCALeads()
    {
        /* Retrieve All CA Leads */
        List<List<sObject>> leadsList = [FIND 'ca' RETURNING Lead(Address, Status, Description)];
        
        /* Loop Through Object Lists */
        for (List<sObject> caList : leadsList)
        {
            /* Loop Through Objects */
            for (sObject caObj : caList)
            {
                /* Cast sObject to Lead */
                Lead caLead = (Lead)caObj;
            	
                /* Close CA Leads */
            	if (caLead.Address.getStateCode() == 'CA')
            	{
                	caLead.Status = 'Closed - Not Converted';
                    caLead.Description = 'We are no longer doing business in California.';
                    update caLead;
            	}
            }
        }
    }
    
    public static void closePastDueOpportunities()
    {
        /* Retrieve All Opportunities */
        List<Opportunity> opportunitiesList = [SELECT CloseDate, StageName FROM Opportunity];
        
        /* Change Past Due Opportunities to Closed Lost */
        for (Opportunity opp : opportunitiesList)
        {
            if (opp.CloseDate < System.today())
            {
                if (opp.StageName != 'Closed Won')
                {
                    opp.StageName = 'Closed Lost';
                    update opp;
                }
            }
        }
    }
}